 /*软定义：Wire.h进行SDA、SCL引脚的软定义,此时硬IIC串口GPIO4、GPIO5不可用；
  *       引脚GPIO1、GPIO3以及GPIO10不可随意进行电平设置；
  *       屏显采用SPI方式，避免七针OLED的改线以及板子的飞线；
  *接线方式: |----------------------------------------------------|
  *         | Nodemcu       |OLED             |SHT30             |
            |---------------|-----------------|------------------|
            | GPIO16        |CS                                  |
            | GPIO05        |DC                                  |
            | GPIO4         |RES                                 |
            | GPIO0         |D1                                  |
            | GPIO2         |D0                                  |
            |---------------|-----------------|------------------| 
            | GPIO12                          |SDA               |
            | GPIO13                          |SCL               |
            | 3.3V                            |vcc               |
            | GND                             |gnd               |
            |----------------------------------------------------|
   本案列采用Adafruit_SSD1306.h库文件，不能直接使用，需要进行文件修改(本例OLED是SSD1306_128_64）)，解决方法:
        1.进入Arduino库文件夹，打开Adafruit_SSD1306.h (使用任意文本编辑器打开)
        2.找到行：#define SSD1306_128_32
        3.取消改行的注释: #define SSD1306_128_64
        4.在Arduino中打开实例文件： ssd1306_128x64_i2c
        5.在setup函数中将地址从0x3D更改为0x3C
****************************库文件引用*****************************************/
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include "SHTSensor.h"
#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
#include <PubSubClient.h>
/*****************************网络初始化****************************/
#define WIFI_SSID "yuhan888888"       // 使用时请修改为当前你的 wifi ssid
#define WIFI_PASS "yuhan123456"   // 使用时请修改为当前你的 wifi 密码                        
const char* mqtt_server = "47.103.121.23";
//const char* Token = "eTitpyFuZgPLffl3RYjQ";//润航种养温湿度
const char* Token1 = "Fe13HIWJQfhwcTr8A6sD";//测试温湿度
const char* Token2 = "hT1plridhhbONjmtP1RL";
WiFiClient espClient;
PubSubClient client(espClient);
/********************oled与DHT22初始化定义*********************************/
#define OLED_MOSI  0 //D1
#define OLED_CLK   2 //D0
#define OLED_DC    5
#define OLED_CS    16
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
SHTSensor SHT30;
/********************变量初始化*********************************/
long lastmsg = 0;
long lastpub = 0;
char msg[50];


static const unsigned char PROGMEM Gateway[] = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFE,0xFB,0xFF,0xFF,0xC0,0x1C,0x00,0x7B,0xBF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x40,0x30,0x11,0xDA,0xDD,0xFF,0x7B,0x87,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFB,0xFD,0x7D,0xC0,0x1D,0xFF,0x77,0x77,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xE0,0x70,0x1D,0xFD,0xFC,0xEE,0x6C,0xAF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFE,0x7B,0xF5,0x5D,0x80,0x0D,0x55,0x63,0xDF,0xCF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x40,0x35,0x51,0xFD,0xFD,0xBB,0x7B,0xAF,0xCF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x6F,0x73,0x97,0xE0,0x3D,0xBB,0x76,0x73,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x60,0x77,0xD7,0xEF,0xBD,0x55,0x61,0x07,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x6F,0x70,0x17,0xEF,0xBC,0xEE,0x7F,0x77,0xCF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x60,0x77,0xD5,0xED,0xBD,0xFF,0x79,0x77,0xCF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x2F,0x70,0x15,0xED,0xBD,0xFF,0x67,0x07,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x6E,0x77,0xD9,0x80,0x0D,0xFC,0x7F,0x77,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  };
  static const unsigned char PROGMEM Kuang[] = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,};\
static const unsigned char PROGMEM Kuang2[] = {
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
};


/***********************************************************/
void setup(void) {
  Wire.begin(12,13);   
  Serial.begin(9600);
  if (SHT30.init()) {
      Serial.print("init(): success\n");
  } else {
      Serial.print("init(): failed\n");
  }
  SHT30.setAccuracy(SHTSensor::SHT_ACCURACY_MEDIUM);
  
  display.display();
  pinMode(16,OUTPUT);
  display.begin(SSD1306_SWITCHCAPVCC);
  delay(2000);          
  display.clearDisplay(); // Clear the display buffer.

  display.drawPixel(10, 10, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
/*display.drawFastHLine(0, 64, SSD1306_LCDWIDTH, WHITE);
  display.setTextSize(1);
  display.setTextColor(WHITE, BLACK);*/
  WiFi.begin(WIFI_SSID, WIFI_PASS);     
  client.setServer(mqtt_server,1883); 
  delay(2000);
  Serial.println(F("[Debug]:初始化完成..."));
}

/******************************************************************/
void loop() {
  /*监测WiFi状态，并显示、提示连接的网关*/
      if (WiFi.status() != WL_CONNECTED) {                                         
              Serial.println(F("[Debug]:请连接Wifi..."));
              display.setTextColor(BLACK,WHITE );
              display.setTextSize(1);
              display.drawBitmap(0, 0, Gateway, 128, 19, 1);
              display.setTextColor(WHITE,BLACK);
              display.setTextSize(1);
              display.setCursor(0, 31);
              display.print("     SSID: TCGW"); 
              display.setCursor(0, 46);
              display.print("   PSWD: tcgw1234"); 
              display.display();
              display.clearDisplay();  
              delay(3500);
              }
              
        digitalWrite(16,HIGH);
        SHT30.readSample();  /*数据采集，采集的过程中会出现采集失败“nan”的正常状况，所以采用缓存来避免“nan”值的显示*/
        float humidity = SHT30.getHumidity();
        float temperature = SHT30.getTemperature();
        Serial.print(F("温度："));
        Serial.print(temperature);
        Serial.print(F("  湿度："));
        Serial.println(humidity);
      
      
        /*屏幕第一行的显示*/
        display.setTextColor(BLACK,WHITE );
        display.setTextSize(1);
        display.setCursor(0, 0);
        display.print("                     ");
        display.setCursor(0, 2);
        display.print("     SHT-DEMO 06       ");
        /*第二行标签的显示*/
        display.setTextSize(1);
        display.setTextColor( WHITE,BLACK);
        display.setCursor(0, 10);
        display.print("                     ");
        display.setCursor(5, 13);
        display.print("TEMP(c)");
        display.setCursor(84, 13);
        display.print("HUMI(%)");
        display.setTextColor(WHITE,BLACK);
        display.drawBitmap(0, 10, Kuang, 128, 15, 1);
        display.drawBitmap(0, 0, Kuang2, 128, 64, 1);
        /*第三行温湿度的显示*/
        display.setTextSize(2);
        display.setCursor(5, 38);
        display.print(temperature,1);
        display.setTextSize(2);
        display.setCursor(76, 38);
        display.print(humidity,1);
        display.display();
        display.clearDisplay();  

        client.loop();                                                    
        long now = millis();                                               
        if (now - lastmsg >15000) {                                        
               lastmsg = now; 
               client.connect(Token1,Token1,""); 
                       /*jason字串拼接*/ 
                       String payload = "{";                     
                       payload += "\"Otem\":"; 
                       payload += temperature;                            
                       payload += ",";
                       payload += "\"Ohum\":"; 
                       payload += humidity;
                       payload += "}";
                       /*数据发布*/
                       char attributes[300];                         
                       payload.toCharArray( attributes, 100 );       
                       client.publish( "v1/devices/me/telemetry", attributes );      
                       Serial.print(F("[Debug]:发布成功,内容为: "));                                  
                       digitalWrite(16,LOW); 
                       Serial.println(attributes);    
                       } 
                 delay(1000);
   }
