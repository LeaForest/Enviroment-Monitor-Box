/* 第三方开发板下载配置方法https://blog.csdn.net/u013810296/article/details/54862447?utm_source=blogxgwz3
 *  api文档地址：https://www.seniverse.com/doc
   此案列采用的是Adafruit_SSD1306.h库文件
   同样采用了Wire.h进行SDA、SCL引脚的软定义
   CS引脚置空、DC置3.3V、D1连SDA（GPIO4）、D0连SCL(GPIO0),所以未采用默认IIC引脚（GPIO4、GPIO5）
   采用了引脚定义复位按钮（也可以直接连接RST引脚）
   本案列存在着显示的问题(下载下来的库不能直接使用，有几处需要修改(本例OLED是SSD1306_128_64）)，解决方法:
        1.进入Arduino库文件夹，修改 Adafruit_SSD1306.h (使用任意文本编辑器打开)
        2.找到并注释掉改行: #define SSD1306_128_32
        3.取消改行的注释: #define SSD1306_128_64
        4.在Arduino中打开实例文件： ssd1306_128x64_i2c
        5.在setup函数中将地址从0x3D更改为0x3C
  NTP选用阿里服务器：ntp1.aliyun.com
               地址：203,107,6,88

为避免取模后出现错误显示，取模时进行设置：1.横向取模；2.保留最后一个逗号；3.只在字母前加0；
*/
/********************库文件引用*************************
 *********************************************
 *********************************************/
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHT.h>
#include <ESP8266WiFi.h>
#include <Time.h>
#include <Timezone.h>
#include "NTP.h"
#include <ArduinoJson.h>
#include<PubSubClient.h>
/*********************************mqtt初始化*******************/

/*****************************网络初始化与时间定义****************************/
#define WIFI_SSID "HUAWEI-yuhan"       // 使用时请修改为当前你的 wifi ssid
#define WIFI_PASS "yuhan123456"   // 使用时请修改为当前你的 wifi 密码
#define ledPin 14                          // 定义ledPin连接到GPIO14
#define STD_TIMEZONE_OFFSET +8    // 时区更改为北京时间时区标准时间偏移 (-7 is mountain time)
TimeChangeRule mySTD = {"", First,  Sun, Jan, 0, STD_TIMEZONE_OFFSET * 60};// 中国制定的夏令时规则
Timezone myTZ(mySTD, mySTD);
time_t previousSecond = 0;// Previous seconds value
WiFiClient espClient;
int weekdays;
int days;
int months;
int years;
int seconds;
int minutes;
int hours;
const char* mqtt_server = "139.224.9.212";
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];


/********************oled与DHT22初始化定义*********************************/
#define OLED_RESET   4     // define SSD1306 OLED reset at ESP8266 GPIO5 (NodeMCU D1)
Adafruit_SSD1306 display(OLED_RESET);
#define DHTPIN  13         // DHT22 data pin is connected to ESP8266 GPIO14 (NodeMCU D5)
#define DHTTYPE DHT22       // DHT22 sensor is used
DHT dht(DHTPIN, DHTTYPE);   // configure DHT library
char temperature[] = "000.0 C";
char humidity[]    = "000.0 %";
/********************天气API初始化与定义*********************************/
const char* host  ="api.seniverse.com";
const char* APIKEY  ="wcmquevztdy1jpca";       //API KEY
const char* city = "nanjing";
const char* language ="en";//zh-Hans 简体中文  会显示乱码
const unsigned long HTTP_TIMEOUT = 3900;               // max respone time from server---------------------------------------------
const size_t MAX_CONTENT_SIZE = 2000;                   // max size of the HTTP response

struct UserData {// 我们要从此网页中提取的数据的类型
  char city[16];//城市名称
  char weather[32];//天气介绍（多云...）
  char temp[16];//温度
  //char pressur[32];//气压
  //char visibi[48];// //能见度，单位为km公里或mi英里
  //char wind_direct[64];//风向
  //char wind_s[48];//风速
  char udate[32];//更新时间
};

char response[MAX_CONTENT_SIZE];
char endOfHeaders[] = "\r\n\r\n";

static const unsigned char PROGMEM Sunny1[] = {//晴
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,
0x00,0x3C,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x01,0x80,
0x3C,0x01,0x80,0x03,0xC0,0x18,0x03,0xC0,0x03,0xE0,0x00,0x07,0xC0,0x03,0xF0,0x00,
0x0F,0x80,0x01,0xF0,0xFF,0x0F,0x00,0x00,0xE3,0xFF,0xC6,0x00,0x00,0x07,0xFF,0xE0,
0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x1F,0x01,0xF8,0x00,0x00,0x1E,0x00,0x78,0x00,
0x00,0x3C,0x00,0x3C,0x00,0x00,0x3C,0x00,0x3C,0x00,0x3C,0x38,0x00,0x3C,0x3C,0x7E,
0x78,0x00,0x1C,0x7E,0x7E,0x78,0x00,0x1E,0xFE,0x7E,0x78,0x00,0x1C,0x7E,0x00,0x38,
0x00,0x3C,0x00,0x00,0x3C,0x00,0x3C,0x00,0x00,0x3E,0x00,0x7C,0x00,0x00,0x1E,0x00,
0xF8,0x00,0x00,0x1F,0x81,0xF0,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xE0,
0x00,0x00,0xE1,0xFF,0x87,0x00,0x01,0xF0,0x7E,0x0F,0x80,0x03,0xE0,0x00,0x0F,0xC0,
0x03,0xC0,0x00,0x07,0xC0,0x03,0x80,0x18,0x03,0xC0,0x01,0x00,0x3C,0x00,0x00,0x00,
0x00,0x3C,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,
0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM Overcast1[] = {//阴
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,
0x1C,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x60,0x1C,0x00,0x00,0x00,0xF0,0x00,
0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x38,0x38,0xF0,0x00,0x00,0x11,0xFF,0xFE,
0x00,0x00,0x03,0x8F,0xFF,0x00,0x00,0x06,0x1F,0xFF,0x80,0x00,0x04,0x3F,0xFF,0xC0,
0x00,0x0C,0x3F,0xFF,0xC0,0x00,0x08,0x7F,0xFF,0xE0,0x00,0x18,0x7F,0xFF,0xE0,0x0F,
0xD8,0x7F,0xFF,0xE0,0x0F,0xD8,0x7F,0xFF,0xE0,0x0F,0x98,0x7F,0xFF,0xE0,0x00,0x18,
0x7F,0xFF,0xE0,0x00,0x0C,0x3F,0xFF,0xE0,0x00,0x0E,0x3F,0xFF,0xC0,0x00,0x07,0x1F,
0xFF,0xC0,0x00,0x03,0x87,0xFF,0x80,0x00,0x09,0xFF,0xFF,0x00,0x00,0x1C,0x79,0xFC,
0x00,0x00,0x3C,0x00,0x70,0x00,0x00,0x78,0x08,0x00,0x00,0x00,0x70,0x1C,0x00,0x00,
0x00,0x20,0x1C,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,
0x00,0x1C,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM Cloudy1[]={//多云
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,
0x3F,0xFE,0x00,0x00,0x01,0xFE,0x3F,0x80,0x00,0x07,0xF8,0x0F,0xF0,0x00,0x0F,0xF0,
0x07,0xF8,0x00,0x1F,0xF8,0x03,0xFC,0x00,0x3F,0xFF,0x80,0x3C,0x00,0x3F,0xFF,0xC0,
0x1E,0x00,0x3F,0xFF,0xF0,0x0E,0x00,0x3F,0x01,0xF8,0x0E,0x03,0xFC,0x00,0x7F,0x8E,
0x0F,0xF8,0x00,0x3F,0xFE,0x1F,0xF0,0x00,0x1F,0xFC,0x3F,0xF0,0x00,0x1F,0xFC,0x7C,
0x00,0x00,0x00,0x7C,0x78,0x00,0x00,0x00,0x3C,0xF0,0x00,0x00,0x00,0x1E,0xF0,0x00,
0x00,0x00,0x1E,0xE0,0x00,0x00,0x00,0x0E,0xE0,0x00,0x00,0x00,0x0E,0xF0,0x00,0x00,
0x00,0x1E,0xF0,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x3C,0x7C,0x08,0x00,0x20,
0x7C,0x3F,0xFC,0x00,0x7F,0xF8,0x1F,0xFE,0x00,0xFF,0xF0,0x0F,0xFF,0x83,0xFF,0xE0,
0x03,0xEF,0xFF,0xEF,0x80,0x00,0x07,0xFF,0xC0,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM PartlyCloudy1[]={//晴间多云
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,
0x01,0xE0,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x03,0x80,0xE0,0x30,0x00,0x03,0xC0,
0xC0,0x70,0x00,0x03,0xE0,0x00,0xF0,0x00,0x01,0xE3,0xF8,0xF0,0x00,0x00,0xEF,0xFC,
0xE0,0x00,0x00,0x1F,0xFE,0x00,0x00,0x00,0x3F,0x1F,0x00,0x00,0x00,0x3C,0x07,0x80,
0x00,0x00,0x78,0x03,0x80,0x00,0x00,0x70,0x03,0xC0,0x00,0x3E,0x70,0x7F,0xDF,0x00,
0x3E,0x71,0xFF,0xFF,0x80,0x3E,0x77,0xFF,0xFF,0x00,0x00,0x7F,0xC1,0xF8,0x00,0x00,
0x7F,0x00,0x7F,0x00,0x03,0xFE,0x00,0x1F,0xE0,0x07,0xFC,0x00,0x0F,0xF0,0x0F,0xF8,
0x00,0x0F,0xF8,0x1E,0x00,0x00,0x00,0x3C,0x1C,0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,
0x00,0x0E,0x38,0x00,0x00,0x00,0x0E,0x38,0x00,0x00,0x00,0x0E,0x38,0x00,0x00,0x00,
0x0E,0x38,0x00,0x00,0x00,0x0E,0x3C,0x00,0x00,0x00,0x1E,0x1E,0x00,0x00,0x00,0x1E,
0x1F,0x04,0x00,0x18,0x7C,0x0F,0xFE,0x00,0x3F,0xF8,0x07,0xFF,0x80,0xFF,0xF0,0x01,
0xFF,0xFF,0xFF,0xE0,0x00,0x03,0xFF,0xE0,0x00,0x00,0x00,0xFF,0xC0,0x00,0x00,0x00,
0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM LightRain1[]={//小雨
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x1C,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x07,0xFF,0xE0,0x00,0x00,0x0F,
0xFF,0xF0,0x00,0x00,0x1F,0x80,0xF8,0x00,0x01,0xFE,0x00,0x7F,0x80,0x07,0xFC,0x00,
0x3F,0xE0,0x1F,0xF8,0x00,0x1F,0xF8,0x1F,0xF0,0x00,0x0F,0xFC,0x3C,0x00,0x00,0x00,
0x3C,0x78,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x0E,0x70,0x00,0x00,0x00,0x0E,
0x70,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x0E,0x78,
0x00,0x00,0x00,0x0E,0x78,0x00,0x00,0x00,0x1E,0x3C,0x08,0x00,0x10,0x3C,0x1F,0xFC,
0x00,0x3F,0xFC,0x1F,0xFF,0x00,0x7F,0xF8,0x07,0xFF,0xC3,0xFF,0xE0,0x01,0xFF,0xFF,
0xFF,0x80,0x00,0x03,0xFF,0xC0,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,
0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,
0x00,0x7E,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM HeavyRain1[]={//大雨
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,
0x07,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x1F,0x01,0xF8,0x00,0x01,0xFE,
0x00,0x7F,0x80,0x07,0xFC,0x00,0x3F,0xE0,0x1F,0xF8,0x00,0x1F,0xF0,0x3F,0xF0,0x00,
0x0F,0xF8,0x3C,0x00,0x00,0x00,0x3C,0x78,0x00,0x00,0x00,0x1E,0x70,0x00,0x00,0x00,
0x1E,0x70,0x00,0x00,0x00,0x0E,0xF0,0x00,0x00,0x00,0x0E,0xF0,0x00,0x00,0x00,0x0E,
0x70,0x00,0x00,0x00,0x0E,0x70,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x1E,0x3C,
0x08,0x00,0x10,0x3C,0x3F,0xFC,0x00,0x3F,0xF8,0x1F,0xFE,0x00,0xFF,0xF8,0x07,0xFF,
0xC3,0xFF,0xE0,0x01,0xFF,0xFF,0xFF,0x80,0x04,0x03,0xFF,0xC0,0x20,0x0E,0x01,0xFF,
0x80,0x70,0x0E,0x03,0x00,0xC0,0xF0,0x1F,0x07,0x81,0xC0,0xF8,0x1F,0x07,0x83,0xE0,
0xF8,0x1F,0x0F,0xC3,0xE1,0xF8,0x1F,0x2F,0xC3,0xF4,0xF8,0x0E,0x7F,0xDB,0xEE,0xF0,
0x00,0xF7,0xB9,0xEE,0x00,0x00,0xF8,0x3C,0x1F,0x00,0x00,0xF8,0x7E,0x1F,0x00,0x01,
0xF8,0x7E,0x3F,0x00,0x00,0xF8,0x7E,0x1F,0x00,0x00,0x70,0x3C,0x0E,0x00,0x00,0x00,
0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM Storm1[]={//暴雨
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x1C,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x07,0xFF,0xE0,0x00,0x00,0x0F,
0xFF,0xF0,0x00,0x00,0x1F,0x80,0xF8,0x00,0x01,0xFE,0x00,0x7F,0x80,0x07,0xFC,0x00,
0x3F,0xE0,0x1F,0xF8,0x00,0x1F,0xF8,0x1F,0xF0,0x00,0x0F,0xFC,0x3C,0x00,0x00,0x00,
0x3C,0x78,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x0E,0x70,0x00,0x00,0x00,0x0E,
0x70,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x0E,0x78,
0x00,0x00,0x00,0x0E,0x78,0x00,0x00,0x00,0x1E,0x3C,0x08,0x00,0x10,0x3C,0x1F,0xFC,
0x00,0x3F,0xFC,0x1F,0xFF,0x00,0x7F,0xF8,0x07,0xFF,0xC3,0xFF,0xE0,0x01,0xFF,0xFF,
0xFF,0x80,0x00,0x03,0xFF,0xC0,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,
0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,
0x00,0x7E,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM LightSnow1[]={//小雪
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,
0x01,0xFF,0x80,0x00,0x00,0x07,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x1F,
0x81,0xF8,0x00,0x01,0xFE,0x00,0x7F,0x80,0x07,0xFC,0x00,0x3F,0xE0,0x1F,0xF8,0x00,
0x1F,0xF0,0x3F,0xF0,0x00,0x0F,0xF8,0x3C,0x00,0x00,0x00,0x7C,0x78,0x00,0x00,0x00,
0x1E,0x70,0x00,0x00,0x00,0x1E,0x70,0x00,0x00,0x00,0x0E,0xF0,0x00,0x00,0x00,0x0E,
0xF0,0x00,0x00,0x00,0x0E,0x70,0x00,0x00,0x00,0x0E,0x70,0x00,0x00,0x00,0x1E,0x78,
0x00,0x00,0x00,0x1E,0x3C,0x08,0x00,0x10,0x3C,0x3F,0xFC,0x00,0x3F,0xF8,0x1F,0xFE,
0x00,0xFF,0xF0,0x0F,0xFF,0xC3,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0x80,0x00,0x07,0xFF,
0xC0,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,
0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,
0x00,0x7C,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM HeavySnow1[]={//大雪
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,
0x07,0xFF,0xC0,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x1F,0x01,0xF8,0x00,0x01,0xFC,
0x00,0x7F,0x80,0x07,0xF8,0x00,0x3F,0xE0,0x1F,0xF8,0x00,0x1F,0xF0,0x3F,0x30,0x00,
0x19,0xF8,0x3C,0x00,0x00,0x00,0x7C,0x78,0x00,0x00,0x00,0x3C,0x70,0x00,0x00,0x00,
0x1C,0x70,0x00,0x00,0x00,0x1E,0x70,0x00,0x00,0x00,0x1E,0x70,0x00,0x00,0x00,0x1E,
0x70,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x1C,0x3C,0x00,0x00,0x00,0x3C,0x3E,
0x1C,0x00,0x30,0xF8,0x1F,0xFE,0x00,0x7F,0xF0,0x0F,0xFF,0x01,0xFF,0xE0,0x03,0xFF,
0xFF,0xFF,0xC0,0x00,0x07,0xFF,0xE0,0x00,0x19,0x01,0xFF,0x81,0x90,0x1F,0x00,0x7C,
0x01,0xF0,0x1F,0x00,0x00,0x01,0xF0,0x3F,0xC0,0x00,0x03,0xFC,0x3F,0xDE,0x00,0x7B,
0xFC,0x1F,0x1E,0x00,0x79,0xF0,0x1F,0x3F,0x00,0xFD,0xF0,0x19,0x3E,0x6C,0xFD,0x90,
0x00,0x1E,0x7C,0x78,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,
0x00,0xFF,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM Sleet1[]={//雨夹雪
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x03,0xFF,0xC0,0x00,0x00,
0x07,0xFF,0xF0,0x00,0x00,0x0F,0xC3,0xF8,0x00,0x00,0x1F,0x00,0x7C,0x00,0x03,0xFC,
0x00,0x3F,0xC0,0x0F,0xF8,0x00,0x1F,0xF0,0x1F,0xF8,0x00,0x0F,0xF8,0x3E,0x10,0x00,
0x00,0x7C,0x3C,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x1E,0x70,0x00,0x00,0x00,
0x0E,0x70,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x0F,
0x70,0x00,0x00,0x00,0x0E,0x78,0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00,0x1E,0x3F,
0x1C,0x00,0x18,0x7C,0x1F,0xFE,0x00,0x7F,0xF8,0x0F,0xFF,0x80,0xFF,0xF0,0x03,0xFF,
0xFF,0xFF,0xE0,0x00,0x07,0xFF,0xE0,0x00,0x00,0x01,0xFF,0xC0,0x00,0x06,0x00,0x7E,
0x00,0x20,0x06,0x00,0x00,0x00,0x70,0x0F,0x00,0x00,0x00,0x70,0x1F,0x00,0x00,0x00,
0xF8,0x1F,0x80,0x00,0x00,0xF8,0x1F,0x9E,0x00,0x78,0xF8,0x1F,0x1E,0x00,0x78,0xF8,
0x0F,0x3F,0x18,0xFC,0x70,0x00,0x1E,0x1C,0x78,0x00,0x00,0x1E,0x3C,0x78,0x00,0x00,
0x00,0x3E,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,
0x3E,0x00,0x00,0x00,0x00,0x18,0x00,0x00,};
static const unsigned char PROGMEM Unknown1[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x03,0x00,0x00,0x07,0x87,0x87,0x0F,0x00,0x07,0xC7,0x87,0x0F,0x00,
0x07,0xC7,0x87,0x0F,0x80,0x07,0xE7,0x8E,0x1F,0x80,0x07,0xF7,0x8E,0x1F,0xC0,0x07,
0xF7,0x8E,0x3F,0xC0,0x07,0xFF,0x9C,0x3D,0xC0,0x07,0xBF,0x9C,0x39,0xC0,0x07,0xBF,
0x9C,0x7F,0xE0,0x07,0x9F,0xB8,0x7F,0xE0,0x07,0x8F,0xB8,0x7F,0xF0,0x07,0x8F,0xB8,
0xF0,0xF0,0x07,0x87,0xF0,0xF0,0xF0,0x03,0x83,0x70,0xE0,0x70,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
static const unsigned char PROGMEM wenduji[]={
0x00,0x00,0x00,0x00,0x78,0x00,0x00,0xFC,0x00,0x07,0xFC,0x00,0x02,0xFC,0x00,0x07,
0xCC,0x00,0x02,0xCC,0x00,0x07,0xCC,0x00,0x07,0xCC,0x00,0x02,0xCC,0x00,0x07,0xCC,
0x00,0x07,0xCC,0x00,0x00,0xCC,0x00,0x01,0x86,0x00,0x03,0x03,0x00,0x03,0x03,0x00,
0x03,0x01,0x00,0x03,0x03,0x00,0x03,0x03,0x00,0x01,0xC6,0x00,0x00,0xFC,0x00,0x00,
0x30,0x00,};
static const unsigned char PROGMEM sheshidu[]={
0x00,0x00,0x00,0x00,0x20,0x00,0x53,0xA0,0x24,0x60,0x08,0x20,0x08,0x00,0x08,0x00,
0x08,0x00,0x08,0x10,0x04,0x20,0x03,0xC0,0x00,0x00,
};

void setup_wifi() { 
      delay(10);
      WiFi.begin(WIFI_SSID, WIFI_PASS);                //进行连接
      while (WiFi.status() != WL_CONNECTED) {    //串口显示状态，直至连接至网络
           delay(500);
           Serial.print(".");
           }
      randomSeed(micros());                       //micros()函数返回以微秒表示的时间并作为随机数
}

void reconnect() {                                                //MQTT服务重连函数
     while (!client.connected()) {                                //当未连接到MQTT服务时                                               
           String clientId = "nodemcu-soil";                          //设置客户端ID（自行更改）
           clientId += String(random(0xffff), HEX);                // 生成10进制的随机数作为客户端ID后缀
           if (client.connect("WLhr4IMdvHBKxPAFMGXg","WLhr4IMdvHBKxPAFMGXg","")) { //当客户端连至当前指定的代理时                 
               delay(20);
           } else {                                              
               delay(5000);                                         //延时5秒=5000ms
               }
           }
     }
/*****************初始化函数******************
 *********************************************
 ********************************************/
void setup(void) {
  Serial.begin(9600);
  pinMode(16,OUTPUT);
  dht.begin(); 
  delay(100);
  initNTP(WIFI_SSID, WIFI_PASS);
  Wire.begin(0, 2);           // set I2C pins [SDA = GPIO0 (D2), SCL = GPIO2 (D3)], default clock is 100kHz
  display.begin(SSD1306_SWITCHCAPVCC, 0x3D);  // initialize with the I2C addr 0x3D (for the 128x64)
  display.clearDisplay(); // Clear the display buffer.
  display.drawFastHLine(0, 64, SSD1306_LCDWIDTH, WHITE);
  display.setTextSize(1);
  display.setTextColor(WHITE, BLACK);

 WiFi.begin(WIFI_SSID, WIFI_PASS);   //连接wifi  
  while (WiFi.status() != WL_CONNECTED) {
    //这个函数是wifi连接状态，返回wifi链接状态
    delay(100);} 
   client.setTimeout(HTTP_TIMEOUT);
}

/**************定义变量与初始化***************
 *********************************************
 ********************************************/
void loop() {
  digitalWrite(16,LOW); 
  if (timeStatus() != timeNotSet) {//  只有在时间发生变化时才更新显示
    if (second() != previousSecond) {
      previousSecond = second();
      updateDisplay(); // 更新显示
      //delay(450);//-------------------------------------------------------
      }
    }   timeDisplay();               
        delay(3000);
        dhtDisplay();
  while (!client.connected()){
     if (!client.connect(host, 80)){
         Serial.println("connection....");
         }
     }
  if(sendRequest(host, city, APIKEY) && skipResponseHeaders()) {
     memset(response, 0, MAX_CONTENT_SIZE);      //清空
     readReponseContent(response, sizeof(response));
     UserData userData;
     if (parseUserData(response, &userData)) {
        printUserData(&userData);
        weatherDisplay(&userData);
        }
     }
     delay(3000);//----------------------------------------------------------------------   
      if (!client.connected()) {                                         //如果MQTT客户端断线
                 reconnect();                                                   //调用MQTT重连函数，确保连上服务器
                 }  
       client.loop();                                                     //MCU接收数据的主循环函数
       long now = millis();                                               //millis()函数从程序开始处返回毫秒
       if (now - lastMsg >1000) {                                         //每隔1秒发一次信号
                 lastMsg = now;                                                  //刷新上一次发送数据的时间
                 String payload = "{";                       //构建一个 JSON 格式的payload的字符串     
                 payload += "\"HUM\":"; 
                 payload += humidity;                             //引入温度变量
                 payload += ","; 
                 payload += "\"TEM\":"; 
                 payload += temperature;                             //引入温度变量
                 payload += "}";
                 char attributes[300];                         //发布主题的内容长度
                 payload.toCharArray( attributes, 100 );       //将pyload字串指向变量attributes
                 client.publish( "v1/devices/me/telemetry", attributes );      //发布的主题名称及存储在json格式payload下的字串（主题名可更改）
                 Serial.print("Pub Message: ");                                  //串口打印发布的信息
                 Serial.println(attributes);       
                 }
}

/**************室内温度显示***************
 *********************************************
 ********************************************/
void dhtDisplay() {
   int humidity = dht.readHumidity();
   float temperature = dht.readTemperature();
   Serial.print("Temp:");
   Serial.print(temperature);
   Serial.print(",    Humi:");
   Serial.println(humidity);
  display.setTextSize(1);
  display.setCursor(50, 0);
  display.print("Indoor");
  
  display.setCursor(5, 13);
  display.print("TEMP:(C)");
  display.setTextSize(2);
  display.setCursor(3, 26);
  display.print(temperature,1);


  display.setTextSize(1);
  display.setCursor(78, 13);
  display.print("HUMI:(%)");
  display.setTextSize(2);
  display.setCursor(86, 26);
  display.print(int(humidity));

  
  display.setTextSize(1);
  display.setCursor(0, 46);
  display.print("---------------------");
  display.setCursor(108, 54);
  display.print("2/3");
  display.setCursor(0, 54);
  display.print("DHT22");
  display.display();
  display.clearDisplay();
}
/**************NTP时间显示***************
 *********************************************
 ********************************************/
void timeDisplay() {
     display.setTextSize(1);
    if (years == NULL && hours == NULL) {
      display.setCursor(30, 0);
      display.print("NTP disconnect yet!");
    }else {
      display.setCursor(35, 0);
      display.print(years);
      display.setCursor(60, 0);
      display.print("/");
    if (months < 10) {
      display.setCursor(67, 0);
      display.print("0");
      display.setCursor(73, 0);// print data on the SSD1306 display
      display.print(months);
    } else {
      display.setCursor(67, 0);// print data on the SSD1306 display
      display.print(months);
    }
      display.setCursor(80, 0);
      display.print("/");
    if (days < 10) {
      display.setCursor(87, 0);
      display.print("0");
      display.setCursor(93, 0);// print data on the SSD1306 display
      display.print(days);
    } else {
      display.setCursor(87, 0);
      display.print(days);
    }
    
      display.setCursor(39, 12);
      display.print(dayStr(weekdays));


      
    display.setTextSize(2); 
    if (hours < 10) {
      display.setCursor(14, 27);
      display.print("0");
      display.setCursor(28, 27);
      display.print(hours);
    } else {
      display.setCursor(14, 27);
      display.print(hours);
    }
      display.setCursor(38, 27);
      display.print(":");
   if (minutes < 10) {
      display.setCursor(50, 27);
      display.print("0");
      display.setCursor(62, 27);
      display.print(minutes);
    } else {
      display.setCursor(50, 27);
      display.print(minutes);
    }
      display.setCursor(76, 27);
      display.print(":");
   if (seconds < 10) {
      display.setCursor(88, 27);
      display.print("0");
      display.setCursor(100, 27);
      display.print(seconds);
    } else {
      display.setCursor(88, 27);
      display.print(seconds);
    }
    
    display.setTextSize(1);
    display.setCursor(0, 46);
    display.print("---------------------");
    display.setCursor(108, 54);
    display.print("1/3");
    display.setCursor(0, 54);
    display.print("Clock");
    display.display();
   }
    display.clearDisplay();
}
/**************天气API显示***************
 *********************************************
 ********************************************/
void weatherDisplay(const struct UserData* userData){
  digitalWrite(16,HIGH);
  if(!strcmp(userData->weather,"Sunny")  ){
     display.drawBitmap(5, 3, Sunny1, 40, 40, 1);
  } else if(!strcmp(userData->weather,"Overcast")){
     display.drawBitmap(5, 3,Overcast1, 40, 40, 1);
   }  else if(!strcmp(userData->weather,"Partly cloudy")){
     display.drawBitmap(5, 3,PartlyCloudy1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Cloudy")){
     display.drawBitmap(5, 3, Cloudy1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Light rain")){
      display.drawBitmap(5, 3, LightRain1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Heavy rain")){
      display.drawBitmap(5, 3, HeavyRain1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Storm")){
      display.drawBitmap(5, 3, Storm1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Light snow")){
      display.drawBitmap(5, 3, LightSnow1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Heavy snow")){
      display.drawBitmap(5, 3, HeavySnow1, 40, 40, 1);
   }else if(!strcmp(userData->weather,"Sleet")){
      display.drawBitmap(5, 3, Sleet1, 40, 40, 1);
   }else{
      display.drawBitmap(5,3,Unknown1,40,40,1);
    }
   
    display.setTextSize(0);
    display.setCursor(70, 0);
    display.print(userData->city);

    display.drawBitmap(60, 10, wenduji, 24, 22, 1);
    display.setTextSize(2);
    display.setCursor(80, 15);
    display.print(userData->temp);
     display.setTextSize(1);
    display.drawBitmap(105, 18, sheshidu, 16, 12, 1);
    
    display.setTextSize(1);
    display.setCursor(60, 36);
    display.print(userData->weather);

    display.setTextSize(1);
    display.setCursor(0, 46);
    display.print("---------------------");
    display.setCursor(108, 54);
    display.print("3/3");
    display.setCursor(0, 54);
    display.print("Weather");
  
   display.display();
   display.clearDisplay();
  }  
/******************温湿度值获取***************
 *********************************************
 ********************************************/


/**************NTP时间获取*****************
 *********************************************
 ********************************************/
void updateDisplay(void) {// 这个函数每秒调用一次
  TimeChangeRule *tcr;        // 指向时间更改规则的指针
  time_t utc = now();// 从NTP提供程序读取当前UTC时间
  time_t localTime = myTZ.toLocal(utc, &tcr);// 考虑到DST，转换到本地时间

  weekdays =   weekday(localTime); // 将时间映射到像素位置
  days    =   day(localTime);
  months  =   month(localTime);
  years   =   year(localTime);
  seconds =   second(localTime);
  minutes =   minute(localTime);
  hours  =   hour(localTime) ;   //12小时使用格式: 12(localTime)  isPM()/isAM()

  Serial.print("{\"Date:");
  Serial.print(days);
  Serial.print("/");
  Serial.print(months);
  Serial.print("/");
  Serial.print(years);
  Serial.print("-");
  Serial.print(hours);
  Serial.print(":");
  Serial.print(minutes);
  Serial.print(":");
  Serial.print(seconds);
  Serial.print("-");
  Serial.print(dayStr(weekdays));
  Serial.println("}");
}






/********************天气获取*****************
 *********************************************
 ********************************************/
bool sendRequest(const char* host, const char* cityid, const char* apiKey) {
  String GetUrl = "/v3/weather/now.json?key=";
  GetUrl += apiKey;
  GetUrl += "&location=";
  GetUrl += city;
  GetUrl += "&language=";
  GetUrl += language;
  client.print(String("GET ") + GetUrl + " HTTP/1.1\r\n" +"Host: " + host + "\r\n" +"Connection: close\r\n\r\n");   
  return true;
}

bool skipResponseHeaders() {// HTTP headers end with an empty line
  bool ok = client.find(endOfHeaders);
  if (!ok) {
    Serial.println("No response or invalid response!");
    }
  return ok;
}
  

void readReponseContent(char* content, size_t maxSize) { //从HTTP服务器响应中读取正文
    size_t length = client.peekBytes(content, maxSize);
    delay(100);//----------------------------------------------------------------------------------------------------------
    //Serial.println("Get the data from Internet!");
    content[length] = 0;
    //Serial.println(content);
   //Serial.println("Read data Over!");
   client.flush();//这句代码需要加上  不然会发现每隔一次client.find会失败
}

bool parseUserData(char* content, struct UserData* userData) {
    //根据我们需要解析的数据来计算JSON缓冲区最佳大小,
    //const size_t BUFFER_SIZE = 1024;//如果你使用StaticJsonBuffer时才需要
    //StaticJsonBuffer<BUFFER_SIZE> jsonBuffer;//在堆栈上分配一个临时内存池.如果堆栈的内存池太大，使用 DynamicJsonBuffer jsonBuffer 代替
    DynamicJsonBuffer jsonBuffer;
    JsonObject& root = jsonBuffer.parseObject(content);
    if (!root.success()) {
        Serial.println("JSON parsing failed!");
        return false;
        }   
    strcpy(userData->city, root["results"][0]["location"]["name"]);
    strcpy(userData->weather, root["results"][0]["now"]["text"]);
    strcpy(userData->temp, root["results"][0]["now"]["temperature"]);    
    //strcpy(userData->pressur, root["results"][0]["now"]["pressure"]);
   //    strcpy(userData->visibi, root["results"][0]["now"]["visibility"]);
   // strcpy(userData->wind_direct, root["results"][0]["now"]["wind_direction"]);
   //  strcpy(userData->wind_s, root["results"][0]["now"]["wind_speed"]);
    strcpy(userData->udate, root["results"][0]["last_update"]);
    return true; //  -- 这不是强制复制，你可以使用指针，因为他们是指向“内容”缓冲区内，所以你需要确保当你读取字符串时它仍在内存中
}

void printUserData(const struct UserData* userData) {// 打印从JSON中提取的数据
    Serial.print("City : ");
    Serial.print(userData->city);

    Serial.print(", \t"); 
    Serial.print("Weather : ");
    Serial.print(userData->weather);

    
    Serial.print(",\t");
    Serial.print("Temp : ");
    Serial.print(userData->temp);

    Serial.print(" C");
    Serial.print(",\t");
   //Serial.print(userData->pressur);
    //Serial.print(" ppa");
    //Serial.print(",\t");
    Serial.print("Last Updata : ");
    Serial.println(userData->udate);
}

/*
void stopConnect() {// 关闭与HTTP服务器连接
  Serial.println("Disconnect");
  client.stop();
}*/
